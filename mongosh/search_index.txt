# https://www.mongodb.com/docs/atlas/atlas-search/atlas-search-overview/?_ga=2.267672142.1116864442.1725237344-148058456.1719876568&_gac=1.161879502.1725081506.Cj0KCQjw28W2BhC7ARIsAPerrcLn8fZZPb5JH8Ad_4-a73QZ0nIWAJcT2pRuplR3q-cpUg9NkCq2tt0aAqlAEALw_wcB
# https://www.mongodb.com/docs/atlas/atlas-search/create-index/?_ga=2.267672142.1116864442.1725237344-148058456.1719876568&_gac=1.161879502.1725081506.Cj0KCQjw28W2BhC7ARIsAPerrcLn8fZZPb5JH8Ad_4-a73QZ0nIWAJcT2pRuplR3q-cpUg9NkCq2tt0aAqlAEALw_wcB
# https://www.mongodb.com/docs/atlas/atlas-search/compound/?_ga=2.267672142.1116864442.1725237344-148058456.1719876568&_gac=1.161879502.1725081506.Cj0KCQjw28W2BhC7ARIsAPerrcLn8fZZPb5JH8Ad_4-a73QZ0nIWAJcT2pRuplR3q-cpUg9NkCq2tt0aAqlAEALw_wcB#scoring-behavior
# https://www.mongodb.com/docs/atlas/atlas-search/facet/?_ga=2.267672142.1116864442.1725237344-148058456.1719876568&_gac=1.161879502.1725081506.Cj0KCQjw28W2BhC7ARIsAPerrcLn8fZZPb5JH8Ad_4-a73QZ0nIWAJcT2pRuplR3q-cpUg9NkCq2tt0aAqlAEALw_wcB


# Dynamic search
# All of the fields including nested fields.
# search all of the fields with equal weight.
# search_index.json
{
    "name": "sample_supplies-sales-dynamic",
    "searchAnalyzer": "lucene.standard",
    "analyzer": "lucene.standard",
    "collectionName": "sales",
    "database": "sample_supplies",
    "mappings": {
        "dynamic": true
    }
}

# create the Atlas Search index
atlas clusters search indexes create --clusterName myAtlasClusterEDU -f /app/search_index.json

# verify that the index creation has started
atlas clusters search indexes list --clusterName myAtlasClusterEDU --db sample_supplies --collection sales


db.sales.findOne()

var pipeline = [
    {
        $search: {
            index: 'sample_supplies-sales-dynamic',
            text: {
                query: 'notepad',
                path: { 'wildcard': '*' }
            } 
        } 
    },
    {
        $set: {
            score: { $meta: "searchScore" }
        }
    }
]
db.sales.aggregate(pipeline)


# Static search
# The fields being queried are always the same
# search_index.json
{
    "name": "sample_supplies-sales-static",
    "searchAnalyzer": "lucene.standard",
    "analyzer": "lucene.standard",
    "collectionName": "sales",
    "database": "sample_supplies",
    "mappings": {
        "dynamic": false,
        "fields": {
            "storeLocation": {
                "type": "string"
            }
        }
    }
}

# create the Atlas Search index
atlas clusters search indexes create --clusterName myAtlasClusterEDU -f /app/search_index.json

# verify that the index creation has started
atlas clusters search indexes list --clusterName myAtlasClusterEDU --db sample_supplies --collection sales


# Connecto to database
mongosh -u myAtlasDBUser -p myatlas-001 $MY_ATLAS_CONNECTION_STRING/sample_supplies

db.sales.aggregate(
    [
        {
            $search: {
                index: 'sample_supplies-sales-static',
                text: {
                    query: 'London', path: { 'wildcard': '*' }
                } 
            } 
        },
        {
            $set: {
                score: { $meta: "searchScore" }
            }
        }
    ]
)


# The compound operator within the $search aggregation stage allows us to give weight to different field 
# and also filter our results without having to create additional aggregation stages.
# "must" will exclude records that do not meet the criteria. 
# "mustNot" will exclude results that do meet the criteria. 
# "should" will allow you to give weight to results that do meet the criteria so that they appear first. 
# "filter" will remove results that do not meet the criteria.
{
    $search: {
        "compound": {
            "must": [
                {
                    "text": {
                        "query": "field",
                        "path": "habitat"
                    }
                }
            ],
            "should": [
                {
                    "range": {
                        "gte": 45,
                        "path": "wingspan_cm",
                        "score": {
                            "constant": {
                                "value": 5
                            }
                        }
                    }
                }
            ]
        }
    }
}



db.sales.aggregate(
    [
        {
            $search: {
                index: 'sample_supplies-sales-dynamic',
                "compound": {
                    "filter": [
                        {
                            "text": {
                                "query": "Online",
                                "path": "purchaseMethod"
                            }
                        }
                    ],
                    "should": [
                        {
                            "text": {
                                "query": "notepad",
                                "path": "items.name",
                                "score": {
                                    "constant": { 
                                        "value": 5 
                                    } 
                                }
                            }
                        }
                    ]
                }
            }
        },
        {
            $project: {
                "items.name": 1,
                "purchaseMethod": 1,
                "score": {$meta: "searchScore"}
            }
        }
    ]
)


# $searchMeta is an aggregation stage. if our search results are broken into buckets, 
# using facet, we can see that in the $searchMeta stage, because those buckets are information about how the search results are formatted.
$searchMeta: {
    "facet": {
        "operator": {
            "text": {
                "query": ["Northern Cardinal"],
                "path": "common_name"
            }
        },
        "facets": {
            "sightingWeekFacet": {
                "type": "date",
                "path": "sighting",
                "boundaries": [
                    ISODate("2022-01-01"), 
                    ISODate("2022-01-08"),
                    ISODate("2022-01-15"),
                    ISODate("2022-01-22")
                ],
                "default" : "other"
            }
        }
    }
}


{
    "name": "sample_supplies-sales-facets",
    "searchAnalyzer": "lucene.standard",
    "analyzer": "lucene.standard",
    "collectionName": "sales",
    "database": "sample_supplies",
    "mappings": {
        "dynamic": true,
        "fields": {
            "purchaseMethod": [
                {
                    "dynamic": true,
                    "type": "document"
                },
                {
                    "type": "string"
                }
            ],
            "storeLocation": [
                {
                    "dynamic": true,
                    "type": "document"
                },
                {
                    "type": "stringFacet"
                }
            ]
        }
    }
}



# Create
atlas clusters search indexes create --clusterName myAtlasClusterEDU -f /app/search_index.json

# To verify that the index creation has started
atlas clusters search indexes list --clusterName myAtlasClusterEDU --db sample_supplies --collection sales


db.sales.aggregate(
    [
        {
            $searchMeta: {
                index: 'sample_supplies-sales-facets',
                "facet": {
                    "operator": {
                        "text": {
                            "query": ["In store"],
                            "path": "purchaseMethod"
                        }
                    },
                    "facets": {
                        "locationFacet": {
                            "type": "string",
                            "path": "storeLocation",
                        }
                    }
                }
            }
        }
    ]
)